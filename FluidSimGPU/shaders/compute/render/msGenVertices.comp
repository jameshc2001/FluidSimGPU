#version 430 core

layout (local_size_x = 1024) in; //working in 1D

struct VertexData {
	vec4 position;
	vec4 color;
};

layout(std430, binding = 5) buffer msVertexBuffer {
	VertexData msVertices[];
};

layout(std430, binding = 4) buffer ColorBuffer {
	float values[103576];
	vec4 colors[103576];
};

layout(std140, binding = 0) uniform SimulationValues {
	int numParticles;
	int numCells;
	int xCells;
	int yCells;
	int screenWidth;
	int screenHeight;
	int apPower;
	int cNumCells;
	int cxCells;
	int cyCells;
	float maxVelocity;
	float particleRadius;
	float boundDamping;
	float kernelRadius;
	float kr2;
	float poly6;
	float spikyGrad;
	float relaxation;
	float apDenominator;
	float apConstant;
	float deltaTime;
	float gravity;
	float cResolution;
	float cResHalf;
	float cRadius;
	float cRadius2;
};

float minval = 1.0; //important!
float vals[8] = {0, 0, 0, 0, 0, 0, 0, 0}; //values of corners and midpoints, ordered as show in diagram
vec2 pos[8]; //positions of corners and midpoints, ordered as show in diagram
vec4 cols[8]; //colors of corners and midpoints, ordered as show in diagram
int currentTriangle = 0; //keep track of how many triangle we have generated

//      3      6      2
//		______________	
//		|			 |
//		|			 |
//	   7|			 | 5
//		|			 |
//		|____________|
//     0      4       1

//linear interpolate between corners v1 and v2 and store result in v3
void lerp(int v1, int v2, int v3) {
	float scale = (minval - vals[v2]) / (vals[v1] - vals[v2]);
	pos[v3] = pos[v2] + (pos[v1] - pos[v2]) * scale;
	cols[v3] = cols[v2] + (cols[v1] - cols[v2]) * scale;
	vals[v3] = minval;
}

//sneak the values into the position vector for later use
void setTriangle(int cid, int v1, int v2, int v3) {
	//check midpoints have been generated
	if (v1 > 3 && vals[v1] == 0) lerp(v1 - 4, (v1 + 1) % 4, v1);
	if (v2 > 3 && vals[v2] == 0) lerp(v2 - 4, (v2 + 1) % 4, v2);
	if (v3 > 3 && vals[v3] == 0) lerp(v3 - 4, (v3 + 1) % 4, v3);
	
	//generate triangle
	int tid = currentTriangle * 3; //because there are 3 vertices per triangle
	msVertices[cid + tid] = VertexData(vec4(pos[v1], vals[v1], 0), cols[v1]); //store meta-ball value in z component for use in frag shader
	msVertices[cid + tid + 1] = VertexData(vec4(pos[v2], vals[v2], 0), cols[v2]);
	msVertices[cid + tid + 2] = VertexData(vec4(pos[v3], vals[v3], 0), cols[v3]);
	currentTriangle += 1;
}

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id >= cNumCells) return;

	//color grid coordinates
	int cy = int(floor(id / cxCells));
	int cx = int(id - cy * cxCells);

	//dont calculate cells off edge of grid
	if (cy >= cyCells - 1) return;
	if (cx >= cxCells - 1) return;

	//get index into values and colors arrays
	int cid = cy * cxCells + cx;

	//get values and colors of corners
	vals[0] = values[cid];
	vals[1] = values[cid + 1];
	vals[2] = values[cid + cxCells + 1];
	vals[3] = values[cid + cxCells];
	cols[0] = colors[cid];
	cols[1] = colors[cid + 1];
	cols[2] = colors[cid + cxCells + 1];
	cols[3] = colors[cid + cxCells];


	//get possible case out of the available 15
	int code = 0;
	if (vals[0] > minval) code += 1;
	if (vals[1] > minval) code += 2;
	if (vals[2] > minval) code += 4;
	if (vals[3] > minval) code += 8;

	//generate positions of corners
	pos[0] = vec2(cx * cResolution, cy * cResolution);
	pos[1] = vec2((cx + 1) * cResolution, cy * cResolution);
	pos[2] = vec2((cx + 1) * cResolution, (cy + 1) * cResolution);
	pos[3] = vec2(cx * cResolution, (cy + 1) * cResolution);

	//adjust id for indexing into vertex ssbo
	cid *= 9; //by 9 because 9 possible vertices per cell

	switch(code) {
		
		//basic single corner cases
		case 1:
			setTriangle(cid, 0, 4, 7);
			break;
		case 2:
			setTriangle(cid, 1, 5, 4);
			break;
		case 4:
			setTriangle(cid, 2, 6, 5);
			break;
		case 8:
			setTriangle(cid, 3, 7, 6);
			break;

		//horizontal line cases
		case 3:
			setTriangle(cid, 0, 1, 7);
			setTriangle(cid, 1, 5, 7);
			break;
		case 12:
			setTriangle(cid, 2, 3, 5);
			setTriangle(cid, 3, 7, 5);
			break;

		//vertical line cases
		case 6:
			setTriangle(cid, 1, 2, 4);
			setTriangle(cid, 2, 6, 4);
			break;
		case 9:
			setTriangle(cid, 0, 4, 6);
			setTriangle(cid, 3, 0, 6);
			break;

		//3 point cases
		case 7:
			setTriangle(cid, 0, 6, 7);
			setTriangle(cid, 0, 2, 6);
			setTriangle(cid, 0, 1, 2);
			break;
		case 11:
			setTriangle(cid, 1, 5, 6);
			setTriangle(cid, 1, 6, 3);
			setTriangle(cid, 1, 3, 0);
			break;
		case 13:
			setTriangle(cid, 0, 4, 5);
			setTriangle(cid, 0, 5, 2);
			setTriangle(cid, 0, 2, 3);
			break;
		case 14:
			setTriangle(cid, 3, 7, 4);
			setTriangle(cid, 3, 4, 1);
			setTriangle(cid, 3, 1, 2);
			break;

		//ambigous cases
		case 5:
			setTriangle(cid, 0, 4, 7);
			setTriangle(cid, 2, 6, 5);
			break;
		case 10:
			setTriangle(cid, 3, 7, 6);
			setTriangle(cid, 1, 5, 4);
			break;

		//full case
		case 15:
			setTriangle(cid, 0, 1, 3);
			setTriangle(cid, 1, 2, 3);
			break;
	}

	//fill in remaining triangles
	while (currentTriangle < 3) {
		int tid = currentTriangle * 3;
		msVertices[cid + tid] = VertexData(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0));
		msVertices[cid + tid + 1] = VertexData(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0));
		msVertices[cid + tid + 2] = VertexData(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0));
		currentTriangle += 1;
	}
}