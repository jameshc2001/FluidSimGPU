#version 430 core

layout (local_size_x = 1024) in; //working in 1D

//this struct has to have size equal to multiple of largest element,
//in this case that is vec2 with 8 bytes, the total of the struct is 32 bytes.
struct Particle {
	vec2 position;
	vec2 predictedPosition;
	vec2 velocity;
	float lamda;
	int properties;
};

//largest is vec4 with 16 bytes, total is 32
struct Properties { //particle properties
	float mass;
	float viscosity;
	float restDensity;
	int id;
	vec4 color;
};

layout(std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout(std430, binding = 1) buffer GridCells {
	int cellStart[];
};

layout(std430, binding = 2) buffer PropertiesBuffer {
	Properties properties[6];
	float densities[];
};

layout(std430, binding = 4) buffer ColorBuffer {
	float colors[];
};

layout(std140, binding = 0) uniform SimulationValues {
	int numParticles;
	int numCells;
	int xCells;
	int yCells;
	int screenWidth;
	int screenHeight;
	int apPower;
	int cNumCells;
	int cxCells;
	int cyCells;
	int finalIteration;
	float maxVelocity;
	float particleRadius;
	float boundDamping;
	float kernelRadius;
	float kr2;
	float poly6;
	float spikyGrad;
	float relaxation;
	float apDenominator;
	float apConstant;
	float deltaTime;
	float gravity;
	float cResolution;
	float cResHalf;
	float cRadius;
	float cRadius2;
};

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id >= cNumCells) return;

	//color grid coordinates
	int cy = int(floor(id / cxCells));
	int cx = int(id - cy * cxCells);

	vec2 position = vec2(cx * cResolution, cy * cResolution);

	int px = int(floor(position.x / kernelRadius));
	int py = int(floor(position.y / kernelRadius));

	float color = 0.0;

	for (int y = py - 1; y <= py + 1; y++) {
		for (int x = px - 1; x <= px + 1; x++) {
			if (y < 0 || x < 0 || y >= yCells || x >= xCells) continue; //out of bounds

			int cellID = y * xCells + x;
			for (int i = cellStart[cellID]; i < cellStart[cellID + 1]; i++) { //loop through all particles in cell
				Particle o = particles[i];

				vec2 difference = position - o.position;
				float dist2 = dot(difference, difference);

				if (dist2 < cRadius2) {
					//float oMass = properties[o.properties].mass;

					//ok so i think we should really be using densities here but we will have to see
					//i think using the densites kind of normalises the color values, will be a lot better
					//for the planned linear interpolation

					//density stored in lambda for optimisation purposes
//					float polyTemp = kr2 - dist2;
//					color += (oMass * poly6 * polyTemp * polyTemp * polyTemp) / o.lamda;

					color += (particleRadius * particleRadius) / dist2;
					

				}
			}
		}
	}

	colors[id] = color;

//	if (alternate == 1) {
//		colors[id] = color;
//	}
//	else {
//		colors[id + cNumCells] = color;
//	}
//
	//colors[id] = color;
//	if (color > 0) colors[id] = 1;
//	else colors[id] = 0;
}