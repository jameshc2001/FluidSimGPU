#version 430 core

layout (local_size_x = 1024) in; //working in 1D

//this struct has to have size equal to multiple of largest element,
//in this case that is vec2 with 8 bytes, the total of the struct is 32 bytes.
struct Particle {
	vec2 position;
	vec2 predictedPosition;
	vec2 velocity;
	float lamda;
	int properties;
};

//largest is vec4 with 16 bytes, total is 32
struct Properties { //particle properties
	float mass;
	float viscosity;
	float restDensity;
	bool diseased;
	vec4 color;
};

struct Line {
	vec2 a;
	vec2 b;
	vec2 ab;
	float lengthAb;
	int id;
};

layout(std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout(std430, binding = 1) buffer GridCells {
	int cellStart[];
};

layout(std430, binding = 2) buffer PropertiesBuffer {
	Properties properties[6];
	float densities[];
};

layout(std430, binding = 6) buffer LineBuffer {
	Line lines[512]; //needs to be updated each time max lines is changed
	int lineCellStart[14652]; //this number needs to be changed each time line grid resolution is changed!
	int lineIndexes[]; //unkwown length so must be at end of buffer
};

layout(std140, binding = 0) uniform SimulationValues {
	int numParticles;
	int numCells;
	int xCells;
	int yCells;
	int screenWidth;
	int screenHeight;
	int apPower;
	int cNumCells;
	int cxCells;
	int cyCells;
	int finalIteration;
	float maxVelocity;
	float particleRadius;
	float boundDamping;
	float kernelRadius;
	float kr2;
	float poly6;
	float spikyGrad;
	float relaxation;
	float apDenominator;
	float apConstant;
	float deltaTime;
	float gravity;
	float cResolution;
	float cResHalf;
	float cRadius;
	float cRadius2;
};

uniform float lineGridRes;
uniform int lineXCells;

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id >= numParticles) return;

	Particle p = particles[id];

	//p.velocity = (p.predictedPosition - p.position) / deltaTime; pretty sure this is useless

//	//apply CFL
//	p.velocity = p.predictedPosition - p.position; //the translation we play to apply to the particle
//
//	float velocity2 = dot(p.velocity, p.velocity);
//	if (velocity2 > maxVelocity * maxVelocity) { //limit velocity
//		p.velocity /= maxVelocity;
//		p.predictedPosition = p.position + p.velocity; //adjust position
//	}
//
//	p.velocity /= deltaTime;

	//calculate and apply viscosity
	vec2 viscosity = vec2(0.0, 0.0);

	int px = int(floor(p.position.x / kernelRadius));
	int py = int(floor(p.position.y / kernelRadius));

	//loop through neighbouring cells to calculate viscosities affect on particle
	for (int y = py - 1; y <= py + 1; y++) {
		for (int x = px - 1; x <= px + 1; x++) {
			if (y < 0 || x < 0 || y >= yCells || x >= xCells) continue; //out of bounds

			int cellID = y * xCells + x;
			for (int i = cellStart[cellID]; i < cellStart[cellID + 1]; i++) { //loop through all particles in cell
				Particle o = particles[i];

				vec2 direction = p.predictedPosition - o.predictedPosition;
				float dist2 = dot(direction, direction);
				if (dist2 < kr2) {
					vec2 velocityDifference = o.velocity - p.velocity; //may be using o's old velocity, doesnt matter
					float oMass = properties[o.properties].mass;

					float polyTemp = kr2 - dist2;
					viscosity += velocityDifference * (oMass * poly6 * polyTemp * polyTemp * polyTemp);
					//viscosity += vec2(1,1) * dot(velocityDifference, direction * (oMass * poly6 * polyTemp * polyTemp * polyTemp));
				}
			}
		}
	}
	//barrier();
	p.velocity += viscosity * properties[p.properties].viscosity;
	p.position = p.predictedPosition;

	//line collisions solving
	int lx = int(floor(p.position.x / lineGridRes));
	int ly = int(floor(p.position.y / lineGridRes));
	int lineGridCell = ly * lineXCells + lx;

	//should i be checking the surrounding 8 cells as well? no, when generating grid we take care of that
	for (int i = lineCellStart[lineGridCell]; i < lineCellStart[lineGridCell + 1]; i++) { //loop through all lines in this cell
		Line l = lines[lineIndexes[i]];

		vec2 c = p.position;
		vec2 ac = c - l.a; //c is the centre of the circle(particle)

		//project ac onto ab to get ad
		vec2 ad = (dot(ac, l.ab) / dot(l.ab, l.ab)) * l.ab;

		//check that d lies between a and b
		//without this check the collision would be between particle and infinite line
		vec2 d = l.a + ad;
		float dotProduct = dot(l.ab, ad);
		if (dotProduct < 0 || dotProduct > l.lengthAb * l.lengthAb) continue;

		//check for collision
		vec2 dc = c - d;
		float dcLength2 = dot(dc, dc);
		if (dcLength2 < particleRadius * particleRadius) { //collision
			//resolve collision
			vec2 normal = normalize(dc);
			float dcLength = sqrt(dcLength2);
			float amountToAdd = particleRadius - dcLength;
			p.position += normal * amountToAdd;

			//reflect velocity across normal
			vec2 v = p.velocity - 2 * dot(p.velocity, normal) * normal;

			//split into components along normal and ab
			float normalComponent = dot(v, normal);
			float lineComponent = dot(v, l.ab) / l.lengthAb;

			//dampen normal component
			normalComponent *= 0.5;

			//could optionally apply friction to the line component

			//reconstruct dampened velocity and assign
			v = (normalComponent * normal) + (lineComponent * l.ab / l.lengthAb);
			p.velocity = v;
		}
	}

	//boundary solving
	if (p.position.x - particleRadius < 0.0) {
		p.velocity.x *= boundDamping;
		p.position.x = particleRadius;
	}
	else if (p.position.x > screenWidth - particleRadius) {
		p.velocity.x *= boundDamping;
		p.position.x = screenWidth - particleRadius;
	}
	if (p.position.y - particleRadius < 0.0) {
		p.velocity.y *= boundDamping;
		p.position.y = particleRadius;
	}
	else if (p.position.y > screenHeight - particleRadius) {
		p.velocity.y *= boundDamping;
		p.position.y = screenHeight - particleRadius;
	}

	if (finalIteration == 1) {
		p.lamda = densities[id]; //store density in lambda for later use, this is done purely for optimisation purposes
	}

	particles[id] = p;
}