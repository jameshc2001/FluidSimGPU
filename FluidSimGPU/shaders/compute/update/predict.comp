#version 430 core

layout (local_size_x = 1024) in; //working in 1D

//this struct has to have size equal to multiple of largest element,
//in this case that is vec2 with 8 bytes, the total of the struct is 32 bytes.
struct Particle {
	vec2 position;
	vec2 predictedPosition;
	vec2 velocity;
	float lamda;
	int properties;
};

layout(std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

struct Line {
	vec2 a;
	vec2 b;
	vec2 ab;
	float lengthAb;
	int id;
};

layout(std430, binding = 6) buffer LineBuffer {
	Line lines[512]; //needs to be updated each time max lines is changed
	int lineCellStart[14652]; //this number needs to be changed each time line grid resolution is changed!
	int lineIndexes[]; //unkwown length so must be at end of buffer
};

layout(std140, binding = 0) uniform SimulationValues {
	int numParticles;
	int numCells;
	int xCells;
	int yCells;
	int screenWidth;
	int screenHeight;
	int apPower;
	int cNumCells;
	int cxCells;
	int cyCells;
	float maxVelocity;
	float particleRadius;
	float boundDamping;
	float kernelRadius;
	float kr2;
	float poly6;
	float spikyGrad;
	float relaxation;
	float apDenominator;
	float apConstant;
	float deltaTime;
	float gravity;
	float cResolution;
	float cResHalf;
	float cRadius;
	float cRadius2;
};

uniform bool gravityEnabled;
uniform bool windEnabled;
uniform vec2 centre;
uniform vec2 strength;

uniform vec2 blowerDir;
uniform vec2 blowerCentre;
uniform float blowerStrength;
uniform vec2 sourcePos;
uniform vec2 blowerLengthVec;
uniform float blowerLength;
uniform vec2 bV1;
uniform vec2 bV2;
uniform vec2 bV3;
uniform vec2 bV4;
uniform vec2 AABBmin;
uniform vec2 AABBmax;
uniform bool blowerOn;
uniform bool parallel;
uniform bool behindEnd; //true if centre is behind end

uniform float lineGridRes;
uniform int lineXCells;

//From Gareth Rees' answer:
//https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
vec2 getIntersection(vec2 start1, vec2 end1, vec2 start2, vec2 end2, bool segments) {
	vec2 p = start1;
	vec2 r = end1 - start1;
	vec2 q = start2;
	vec2 s = end2 - start2;

	float a = r.x * s.y - r.y * s.x;
	float b = (q - p).x * r.y - (q - p).y * r.x;

	float u = b / a;
	if (a != 0 && segments && u <= 0 || u >= 1)  return vec2(-1, -1); //indicates no intersection of line segments

	return q + u * s;
}

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id >= numParticles) return;

	Particle p = particles[id];

	if (gravityEnabled) {
		p.velocity.y += deltaTime * gravity;
	}

	if (windEnabled) {
		p.velocity.x += 0.01 * strength.x * (-p.position.y + centre.y);
		p.velocity.y += 0.01 * strength.y * (p.position.x - centre.x);
	}

	//blower
	//AABB check
	if (blowerOn && p.position.x < AABBmax.x && p.position.x > AABBmin.x && p.position.y < AABBmax.y && p.position.y > AABBmin.y) {
		//point in quad check, essentially check point is on 'right' side of each line
		float d1 = (p.position.x - bV1.x) * (bV3.y - bV1.y) - (p.position.y - bV1.y) * (bV3.x - bV1.x);
		float d2 = (p.position.x - bV3.x) * (bV4.y - bV3.y) - (p.position.y - bV3.y) * (bV4.x - bV3.x);
		float d3 = (p.position.x - bV4.x) * (bV2.y - bV4.y) - (p.position.y - bV4.y) * (bV2.x - bV4.x);
		float d4 = (p.position.x - bV2.x) * (bV1.y - bV2.y) - (p.position.y - bV2.y) * (bV1.x - bV2.x);
		//small optimization would be to save results of minus operations on quad vertices. Not worth the effort.

		if (d1 < 0 && d2 < 0 && d3 < 0 && d4 < 0) {
			//p.velocity += blowerStrength * blowerDir; //very simple, is it wrong though?

			//get correct source position such that particles on edge of blower are blown
			//away from centre aswell as away from blower. SEE NOTES
			vec2 correctedSource;
			if (parallel) {
				correctedSource = getIntersection(bV2, bV1, p.position, p.position + blowerDir, false);
			}
			else {
				correctedSource = getIntersection(bV2, bV1, p.position, blowerCentre, false);
			}

			//now check if a line is between this point and the blower, use sourceToP and line info
			//bresenham through the line grid
			//first convert to grid coordinates
			int x0 = int(floor(p.position.x / lineGridRes));
			int y0 = int(floor(p.position.y / lineGridRes));
			int x1 = int(floor(correctedSource.x / lineGridRes));
			int y1 = int(floor(correctedSource.y / lineGridRes));

			//use Alois Zingl's version of the bresenham line drawing algorithm from Easy Filter:
			//http://members.chello.at/easyfilter/bresenham.html
			int dx = abs(x1 - x0);
			int dy = -abs(y1 - y0);
			int sx = x0 < x1 ? 1 : -1;
			int sy = y0 < y1 ? 1 : -1;
			int err = dx + dy;
			int e2;

			bool intersection = false;

			while (!intersection) {
				//check if line is there
				int lineGridCell = y0 * lineXCells + x0;
				for (int i = lineCellStart[lineGridCell]; i < lineCellStart[lineGridCell + 1] && !intersection; i++) { //loop through all lines in this cell
					Line l = lines[lineIndexes[i]];
					if (getIntersection(l.a, l.b, p.position, correctedSource, true).x != -1) intersection = true;
				}

				//progress the line drawing algorithm
				e2 = 2 * err;
				if (e2 >= dy) {
					if (x0 == x1) break;
					err += dy;
					x0 += sx;
				}
				if (e2 <= dx) {
					if (y0 == y1) break;
					err += dx;
					y0 += sy;
				}
			}
			//end of bresenham line algorithm

			if (!intersection) { //blow the particle!
				vec2 sourceToP = p.position - correctedSource;
				float dist = length(sourceToP);

				float scaler = dist / blowerLength; //low if particle close to source, bound between 0 and 1
				p.velocity += abs((scaler-1) * blowerStrength) * (sourceToP/dist); //blowerDir; //linear relationship
			}
		}
	}

	//integrate to estimate
	p.predictedPosition = p.position + p.velocity * deltaTime;
	particles[id] = p;
}