#version 430 core

layout (local_size_x = 1024) in; //working in 1D

//this struct has to have size equal to multiple of largest element,
//in this case that is vec2 with 8 bytes, the total of the struct is 32 bytes.
struct Particle {
	vec2 position;
	vec2 predictedPosition;
	vec2 velocity;
	float lamda;
	int properties;
};

//largest is vec4 with 16 bytes, total is 32
struct Properties { //particle properties
	float mass;
	float viscosity;
	float restDensity;
	int id;
	vec4 color;
};

struct VertexData {
	vec4 position;
	vec4 color;
};

layout(std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout(std430, binding = 1) buffer GridCells {
	int cellStart[];
};

layout(std430, binding = 2) buffer PropertiesBuffer {
	Properties properties[6];
	float densities[];
};

layout(std430, binding = 3) buffer VertexBuffer {
	VertexData vertices[];
};

layout(std140, binding = 0) uniform SimulationValues {
	int numParticles;
	int numCells;
	int xCells;
	int yCells;
	int screenWidth;
	int screenHeight;
	int apPower;
	int cNumCells;
	int cxCells;
	int cyCells;
	int finalIteration;
	float maxVelocity;
	float particleRadius;
	float boundDamping;
	float kernelRadius;
	float kr2;
	float poly6;
	float spikyGrad;
	float relaxation;
	float apDenominator;
	float apConstant;
	float deltaTime;
	float gravity;
	float cResolution;
	float cResHalf;
	float cRadius;
	float cRadius2;
};

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id >= numParticles) return;

	Particle p = particles[id];

	p.velocity += p.viscosity * properties[p.properties].viscosity; //apply viscosity now that its not biased

	//boundary solving
	if (p.position.x - particleRadius < 87.0) {
		p.velocity.x *= boundDamping;
		//p.position.x = particleRadius;
		p.position.x = 87 + particleRadius;
	}
	else if (p.position.x > screenWidth - particleRadius) {
		p.velocity.x *= boundDamping;
		p.position.x = screenWidth - particleRadius;
	}
	if (p.position.y - particleRadius < 0.0) {
		p.velocity.y *= boundDamping;
		p.position.y = particleRadius;
	}
	else if (p.position.y > screenHeight - particleRadius) {
		p.velocity.y *= boundDamping;
		p.position.y = screenHeight - particleRadius;
	}

	particles[id] = p;

	//for rendering later, move to its own shader?
	//vertices[id] = VertexData(vec4(p.position, 0.0, 1.0), properties[p.properties].color);
}