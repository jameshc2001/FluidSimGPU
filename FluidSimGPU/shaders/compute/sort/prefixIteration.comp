#version 430 core

layout (local_size_x = 1024) in; //working in 1D

//this struct has to have size equal to multiple of largest element,
//in this case that is vec2 with 8 bytes, the total of the struct is 32 bytes.
struct Particle {
	vec2 position;
	vec2 predictedPosition;
	vec2 velocity;
	float lamda;
	int properties;
};

layout(std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout(std430, binding = 1) buffer GridBuffer {
	int gridData[]; //this same data is referred to as cellStart in the update shaders
};

layout(std140, binding = 0) uniform SimulationValues {
	int numParticles;
	int numCells;
	int xCells;
	int yCells;
	int screenWidth;
	int screenHeight;
	int apPower;
	int cNumCells;
	int cxCells;
	int cyCells;
	float maxVelocity;
	float particleRadius;
	float boundDamping;
	float kernelRadius;
	float kr2;
	float poly6;
	float spikyGrad;
	float relaxation;
	float apDenominator;
	float apConstant;
	float deltaTime;
	float gravity;
	float cResolution;
	float cResHalf;
	float cRadius;
	float cRadius2;
};

uniform int i;
uniform int flag; //decides which way to flip the data
uniform int finalPrefixIteration;

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id >= numCells) return; //note the switch to numCells from numParticles

	int pow2i = int(pow(2, i));

	if (id < pow2i) {
		if (flag == 0) {
			gridData[numCells + id] = gridData[numCells * 2 + id];
		}
		else {
			gridData[numCells * 2 + id] = gridData[numCells + id];
		}
	}
	else {
		if (flag == 0) {
			gridData[numCells + id] = gridData[numCells * 2 + id] + gridData[numCells * 2 + (id - pow2i)];
		}
		else {
			gridData[numCells * 2 + id] = gridData[numCells + id] + gridData[numCells + (id - pow2i)];
		}
	}

	if (finalPrefixIteration == 1) { //convert to exclusive prefix, do this by subtracting initial amounts
		if (flag == 0) {
			gridData[id] = gridData[numCells + id] - gridData[id];
		}
		else {
			gridData[id] = gridData[numCells * 2 + id] - gridData[id];
		}
	}
}